(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{630:function(e,n,t){"use strict";t.r(n),n.default='# 图片 <strong>Image</strong>\n\n## {{ $t("common.usage.preview") }}\n\n<example></example>\n\n## {{ $t("common.usage.usage") }}\n\n{{ $t("common.usage.usage-tips") }}\n\n### Configure Vue Loader\n\nWhen we include local pictures in Vue Single File component as `<img src="picture.jpg" />`. But in fact, it\'s Vue Loader automatically processed the statement into `<img :src="require(\'picture.jpg\')">`, Then picture.jpg can be processed by file-loader and other modules. Therefore, if you want the q-image component to directly import image resources, you need to configure Vue Loader to support this feature. The following gives a rough configuration example. You can also check the [Vue Loader Official Document](https://vue-loader.vuejs.org/guide/asset-url.html) to learn more\n\n```javascript\nrules: [{\n    test: /\\.vue$/,\n    loader: "vue-loader",\n    options: {\n        transformAssetUrls: {\n            "q-image": ["src", "src-dark"]\n            "q-avatar": ["src", "src-dark"],\n            // QAvatar may also involve local image includes\n        }\n    }\n}]\n```\n\nIf you do not want to configure, you can also use require syntax to provide the resource address for q-image:\n\n```html\n&lt;q-image :src=&quot;require(&#39;./picture.jpg&#39;)&quot;&gt;&lt;/q-image&gt;\n```\n\n## {{ $t("common.usage.property") }}\n\n<property-block>\n    <property-item\n        name="src"\n        definition="Image Resource (for Light Mode)"\n        values="String"\n    >\n    </property-item>\n    <property-item\n        name="src-dark"\n        definition="Image Resource for Dark Mode, If this attribute is not set, the image with the src attribute of 0.7 transparency is used in Dark Mode."\n        values="String"\n    >\n    </property-item>\n    <property-item\n        name="mode"\n        definition="Fill mode of the image, equivalent to object-fit attribute. When using this property, you need to set the width and height styles for the component."\n        :values="[\'none\', \'fill\', \'cover\', \'contain\', \'scale-down\']"\n    >\n    </property-item>\n    <property-item\n        name="lazy"\n        definition="Whether to enable lazy loading. This property also can be set via global settings.defaults.image_lazy."\n        defaults="false"\n        values="Boolean"\n    >\n    </property-item>\n    <property-item\n        name="loading"\n        definition="Image loading status, when set to true, use the built-in loading style of the component. You can also pass in custom Vue components. This property also can be set via global settings.defaults.image_loading."\n        defaults="false"\n        :values="[ \'true\', \'false\', \'VueComponent\' ]"\n    >\n    </property-item>\n    <property-item\n        name="error"\n        definition="Image loading failure status, when set to true, use the built-in failure style. You can also pass in custom Vue components. This property also can be set via global settings.defaults.image_error."\n        defaults="false"\n        :values="[ \'true\', \'false\', \'VueComponent\' ]"\n    >\n    </property-item>\n</property-block>'}}]);