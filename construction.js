(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{426:function(t,n,e){"use strict";e.r(n);var s=e(0),o=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("document",[e("q-title",{attrs:{level:1,colorful:""}},[t._v("项目构建")]),t._v(" "),e("q-text",[t._v("\n        本项目主要使用 "),e("strong",[t._v("Webpack")]),t._v(" 作为构建工具，"),e("strong",[t._v("Babel")]),t._v(" 进行代码转译。并使用 "),e("strong",[t._v("Esm")]),t._v(" 处理 NodeJS 侧（构建相关代码）的 ES6/7 支持。在项目略微完善的后期，将考虑开发环境和编译时，分别使用 "),e("strong",[t._v("Webpack")]),t._v(" 和 "),e("strong",[t._v("Rollup")]),t._v(" 进行构建，以此获得最好的开发体验和编译结果。\n    ")]),t._v(" "),e("q-title",{attrs:{level:2}},[t._v("启动")]),t._v(" "),e("q-text",[t._v("\n        在 "),e("strong",[t._v("package.json")]),t._v(" 中可以看到项目的各项启动脚本，如下：\n    ")]),t._v(" "),e("codeblock",{attrs:{lang:"json"}},[t._v('\n        {\n            "scripts": {\n                "start": "cross-env NODE_ENV=development node -r esm bootstrap.js development",\n                "dev": "cross-env NODE_ENV=development node -r esm bootstrap.js development",\n                "build": "cross-env NODE_ENV=production node -r esm bootstrap.js production",\n                "clean": "rm -rf dist/* state*.json",\n                "preview": "serve dist/document",\n                "analyse:document": "webpack-bundle-analyzer stats_document.json",\n                "analyse:library": "webpack-bundle-analyzer stats_library.json",\n                "publish:document": "node -r esm script/publish-document.js"\n            }\n        }\n    ')]),t._v(" "),e("q-title",{attrs:{level:3}},[t._v("bootstrap.js")]),t._v(" "),e("q-text",[t._v("\n        在上述代码中可以看到项目都是通过 "),e("strong",[t._v("bootstrap.js")]),t._v(" 启动的，但是实际上主要的构建相关代码均放置在 "),e("strong",[t._v("/constructor")]),t._v(" 目录中。bootstrap.js 在这里时作为一个启动跳板，用于接收启动参数，并调配开发后编译任务的最终配置。有关这些内容将在后面讲解。\n    ")]),t._v(" "),e("q-title",{attrs:{level:3}},[t._v("开发环境")]),t._v(" "),e("q-text",[e("strong",[t._v("npm run start")]),t._v(" 和 "),e("strong",[t._v("npm run dev")]),t._v(" 是相同的，都是用于启动开发环境。命令上，为了解决 Linux, Windows, ... 下设置环境变量的差异，因此通过 "),e("strong",[t._v("cross-env")]),t._v(" 传入环境变量。然后启动 "),e("strong",[t._v("node")]),t._v("，通过 "),e("strong",[t._v("-r")]),t._v(" 参数选择启动时引用的包，以此通过 "),e("strong",[t._v("esm")]),t._v(" 使运行于 NodeJS 中的构建相关代码也可以使用 ES6/7 语法。最终通过 "),e("strong",[t._v("bootstrap.js")]),t._v(" 文件启动。\n    ")]),t._v(" "),e("q-title",{attrs:{level:3}},[t._v("编译构建")])],1)}),[],!1,null,null,null);n.default=o.exports}}]);